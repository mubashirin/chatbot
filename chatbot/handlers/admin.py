"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""

from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command, Filter
from services.admin_api import AdminAPI
from services.chat_manager import ChatManager
from aiogram.types import CallbackQuery

router = Router()
chat_manager = ChatManager()

async def is_admin(user_id: int) -> bool:
    admins = await AdminAPI.get_admins()
    return user_id in admins

@router.message(CommandStart())
async def admin_start_handler(message: types.Message):
    if await is_admin(message.from_user.id):
        await message.answer("–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")

@router.message(Command("chats"))
async def admin_chats_handler(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    chats = chat_manager.get_active_chats(message.from_user.id)
    if not chats:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")
        return
    text = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã:\n" + "\n".join([f"–ß–∞—Ç #{c.chat_id} —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {c.user_id}" for c in chats])
    await message.answer(text)

@router.message(Command("reply"))
async def admin_reply_handler(message: types.Message):
    if not await is_admin(message.from_user.id):
        return
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply <chat_id> <—Ç–µ–∫—Å—Ç>")
        return
    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id")
        return
    text = args[2]
    chat = chat_manager.storage.get_chat(chat_id)
    if not chat or chat.admin_id != message.from_user.id or not chat.is_active or not getattr(chat, 'accepted', False):
        await message.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω—è—Ç.")
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    chat_manager.add_message(chat_id, message.from_user.id, text)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É
    from aiogram import Bot
    from config.config import API_TOKEN
    bot = Bot(token=API_TOKEN)
    await bot.send_message(chat.user_id, f"–ê–¥–º–∏–Ω: {text}")
    await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.")

@router.callback_query(F.data.startswith("decline_chat:"))
async def decline_chat_handler(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    chat_id = int(callback.data.split(":")[1])
    chat = chat_manager.storage.get_chat(chat_id)
    if not chat or chat.admin_id != callback.from_user.id or not chat.is_active:
        await callback.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", show_alert=True)
        return
    chat.is_active = False
    chat_manager.storage.db.commit()
    # –£–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    from aiogram import Bot
    from config.config import API_TOKEN
    bot = Bot(token=API_TOKEN)
    try:
        await bot.send_message(chat.user_id, "–í–∞—à–∞ –±–µ—Å–µ–¥–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception:
        pass
    await callback.message.edit_text(callback.message.text + "\n\n‚ùå –ë–µ—Å–µ–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await callback.answer("–ë–µ—Å–µ–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", show_alert=True)

@router.callback_query(F.data.startswith("accept_chat:"))
async def accept_chat_handler(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    chat_id = int(callback.data.split(":")[1])
    chat = chat_manager.storage.get_chat(chat_id)
    if not chat or chat.admin_id != callback.from_user.id or not chat.is_active:
        await callback.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", show_alert=True)
        return
    chat.accepted = True
    chat_manager.storage.db.commit()
    # –£–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    from aiogram import Bot
    from config.config import API_TOKEN
    bot = Bot(token=API_TOKEN)
    try:
        await bot.send_message(chat.user_id, "–í–∞—à—É –±–µ—Å–µ–¥—É –ø—Ä–∏–Ω—è–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    except Exception:
        pass
    await callback.message.edit_text(callback.message.text + "\n\n‚úÖ –ë–µ—Å–µ–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞.")
    await callback.answer("–ë–µ—Å–µ–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞.", show_alert=True)

@router.callback_query(F.data.startswith("end_chat:"))
async def end_chat_handler(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    chat_id = int(callback.data.split(":")[1])
    chat = chat_manager.storage.get_chat(chat_id)
    if not chat or chat.admin_id != callback.from_user.id or not chat.is_active:
        await callback.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", show_alert=True)
        return
    chat.is_active = False
    chat_manager.storage.db.commit()
    # –£–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    from aiogram import Bot
    from config.config import API_TOKEN
    bot = Bot(token=API_TOKEN)
    try:
        await bot.send_message(chat.user_id, "–ë–µ—Å–µ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception:
        pass
    await callback.message.edit_text(callback.message.text + "\n\n‚ùå –ë–µ—Å–µ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await callback.answer("–ë–µ—Å–µ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)

@router.callback_query(F.data.startswith("transfer_chat:"))
async def transfer_chat_handler(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    await callback.answer("–ó–∞–≥–ª—É—à–∫–∞: –ø–µ—Ä–µ–ø—Ä–∞–≤–∏—Ç—å —á–∞—Ç –¥—Ä—É–≥–æ–º—É –∞–¥–º–∏–Ω—É.", show_alert=True)

class IsAdmin(Filter):
    async def __call__(self, message: types.Message) -> bool:
        from services.admin_api import AdminAPI
        return message.from_user.id in await AdminAPI.get_admins()

@router.message(IsAdmin())
async def admin_text_handler(message: types.Message):
    print(f"[DEBUG] admin_text_handler: user_id={message.from_user.id}, text={message.text}")
    if not await is_admin(message.from_user.id):
        return
    from db.models import Chat
    chat = chat_manager.storage.db.query(Chat).filter_by(admin_id=message.from_user.id, is_active=True, accepted=True).order_by(Chat.chat_id.desc()).first()
    print(f"[DEBUG] –ù–∞–π–¥–µ–Ω —á–∞—Ç: {chat}")
    if not chat:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–Ω—è—Ç—ã—Ö —á–∞—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    chat_manager.add_message(chat.chat_id, message.from_user.id, message.text)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É
    from aiogram import Bot
    from config.config import API_TOKEN
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    bot = Bot(token=API_TOKEN)
    print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–ª–∏–µ–Ω—Ç—É {chat.user_id}: {message.text}")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ—Å–µ–¥—É", callback_data="end_chat_by_client")]
    ])
    await bot.send_message(chat.user_id, f"–ê–¥–º–∏–Ω: {message.text}", reply_markup=kb)
