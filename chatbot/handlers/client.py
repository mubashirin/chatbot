"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤."""

from aiogram import Router, types
from aiogram.filters import CommandStart, Filter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from services.chat_manager import ChatManager
from db.storage import Storage
from db.models import User, Chat

router = Router()
chat_manager = ChatManager()

class NotAdmin(Filter):
    async def __call__(self, message: types.Message) -> bool:
        from services.admin_api import AdminAPI
        return message.from_user.id not in await AdminAPI.get_admins()

@router.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@router.callback_query(lambda c: c.data == "end_chat_by_client")
async def end_chat_by_client_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    storage = Storage()
    chat = storage.db.query(Chat).filter_by(user_id=user_id, is_active=True).first()
    if not chat:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–µ—Å–µ–¥.", show_alert=True)
        return
    
    chat.is_active = False
    storage.db.commit()
    
    # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞
    from aiogram import Bot
    from config.config import API_TOKEN
    bot = Bot(token=API_TOKEN)
    try:
        await bot.send_message(chat.admin_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –±–µ—Å–µ–¥—É #{chat.chat_id}")
    except Exception:
        pass
    
    await callback.message.edit_text("‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–µ—Å–µ–¥—É —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    await callback.answer("–ë–µ—Å–µ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)

@router.message(NotAdmin())
async def client_message_handler(message: types.Message):
    print(f"[DEBUG] client_message_handler: user_id={message.from_user.id}, text={message.text}")
    user_id = message.from_user.id
    storage = Storage()
    # –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ—Ç
    if not storage.get_user(user_id):
        storage.create_user(user_id, username=message.from_user.username, first_name=message.from_user.first_name, last_name=message.from_user.last_name)
    # –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞
    admin_id = await chat_manager.assign_admin()
    if not admin_id:
        await message.answer("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    # –°–æ–∑–¥–∞—Ç—å —á–∞—Ç, –µ—Å–ª–∏ –Ω–µ—Ç
    chat = storage.db.query(Chat).filter_by(user_id=user_id, is_active=True).first()
    if not chat:
        chat = chat_manager.start_chat(user_id, admin_id)
    # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç ‚Äî –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if not getattr(chat, 'accepted', False):
        chat_manager.add_message(chat.chat_id, user_id, message.text)
        await message.answer("–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ç –≤–∞—à—É –±–µ—Å–µ–¥—É.")
        if chat.admin_id:
            from aiogram import Bot
            from config.config import API_TOKEN
            bot = Bot(token=API_TOKEN)
            user = storage.get_user(user_id)
            if user:
                name = user.first_name or ""
                if user.last_name:
                    name += f" {user.last_name}"
                if user.username:
                    name = f"@{user.username} ({name.strip()})" if name.strip() else f"@{user.username}"
                name = name.strip() or str(user_id)
            else:
                name = str(user_id)
            text = f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} –≤ —á–∞—Ç–µ #{chat.chat_id}:\n\n{message.text}"
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_chat:{chat.chat_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_chat:{chat.chat_id}")
                ]
            ])
            print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è—é –∞–¥–º–∏–Ω—É {chat.admin_id} (type: {type(chat.admin_id)}): {text}")
            await bot.send_message(chat.admin_id, text, reply_markup=kb)
        return
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —á–∞—Ç —É–∂–µ –ø—Ä–∏–Ω—è—Ç)
    chat_manager.add_message(chat.chat_id, user_id, message.text)
    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    # –£–≤–µ–¥–æ–º–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
    if chat.admin_id:
        from aiogram import Bot
        from config.config import API_TOKEN
        bot = Bot(token=API_TOKEN)
        print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è—é –∞–¥–º–∏–Ω—É {chat.admin_id} (type: {type(chat.admin_id)}): {message.text}")
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ—Å–µ–¥—É", callback_data=f"end_chat:{chat.chat_id}"),
                InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"transfer_chat:{chat.chat_id}")
            ]
        ])
        await bot.send_message(chat.admin_id, f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{chat.chat_id}:\n\n{message.text}", reply_markup=kb)
